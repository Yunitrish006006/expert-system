(deftemplate teacher (slot ID) (slot weight))
(deftemplate class (slot ID))
(deftemplate classroom (slot ID) (slot type))
(deftemplate lesson (slot ID) (slot state) (slot class) (slot teacher) (slot type) (multislot time) (multislot room)) 
(deftemplate favorite-time (slot teacher) (multislot time))
(deftemplate refuse-time (slot teacher) (multislot time))

(deffacts initial
  (alltime 101 102 103 104 105 106 107 108 109 110 
	   201 202 203 204 205 206 207 208 209 210
	   301 302 303 304 305 306 307 308 309 310
	   401 402 403 404 405 406 407 408 409 410
	   501 502 503 504 505 506 507 508 509 510)
  (phase load-data)
)

;; Load data from data.txt containing teachers, classes, classrooms, lessons, favorite times, and refused times
(defrule load-data
  ?p <- (phase load-data)
  =>
  (retract ?p)
  (load-facts "data.txt")
  (assert (phase select-lesson))
  (printout t "Data loaded successfully" crlf))

;; Select a lesson to schedule (prioritize teachers with lower weights)
(defrule select-lesson
  ?p <- (phase select-lesson)
  (not (select ?))
  (teacher (ID ?teacher) (weight ?weight))
  (lesson (ID ?lesson) (state 0) (teacher ?teacher))
  (not (and (teacher (ID ?else) (weight ?w2&:(< ?w2 ?weight)))
             (lesson (state 0) (teacher ?else))))	=>
        (retract ?p)
	(assert (select ?lesson))
        (assert (phase try-favorite)))

;; Try to schedule in teacher's favorite time slots (consecutive 3 slots)
(defrule try-favorite-time
        ?p <- (phase try-favorite)
        ?f1 <- (select ?select)
        ?f2 <- (lesson (ID ?select) (state 0) (class ?class) (teacher ?teacher) (type ?type) (time) (room))
        ?f3 <- (teacher (ID ?teacher) (weight ?weight))
        (favorite-time (teacher ?teacher) (time $? ?t1 ?t2 ?t3&:(= (+ ?t1 2) ?t3)&:(= (+ ?t1 1) ?t2) $?))
        (refuse-time (teacher ?teacher) (time $?r-t))
        (test (not (or (member$ ?t1 $?r-t) (member$ ?t2 $?r-t) (member$ ?t3 $?r-t))))
        (classroom (ID ?classroom) (type ?type))
        (not (lesson (teacher ?teacher) (time $? ?t1|?t2|?t3 $?)))
        (not (lesson (class ?class) (time $? ?t1|?t2|?t3 $?)))
        (not (lesson (room $? ?classroom $?) (time $? ?t1 $?)))
        (not (lesson (room $? ?classroom $?) (time $? ?t2 $?)))
        (not (lesson (room $? ?classroom $?) (time $? ?t3 $?)))
        =>
        (retract ?p ?f1)
        (assert (phase select-lesson))
        (modify ?f3 (weight (+ ?weight 2)))
        (modify ?f2 (state 1) (time ?t1 ?t2 ?t3) (room ?classroom ?classroom ?classroom))
        (printout t "Scheduled lesson " ?select " in favorite time slots " ?t1 " " ?t2 " " ?t3 " for teacher " ?teacher crlf))

;; If we can't schedule in favorite time, try any valid time slot
(defrule try-favorite-fallback
        ?p <- (phase try-favorite)
        (declare (salience -10))
        =>
        (retract ?p)
        (assert (phase try-regular)))

;; Schedule in any valid time slots that don't conflict with refuse times
(defrule try-regular-time
        ?p <- (phase try-regular)
        ?f1 <- (select ?select)
        ?f2 <- (lesson (ID ?select) (state 0) (class ?class) (teacher ?teacher) (type ?type) (time) (room))
        ?f3 <- (teacher (ID ?teacher) (weight ?weight))
        (alltime $? ?t1 ?t2&:(= (+ ?t1 1) ?t2) ?t3&:(= (+ ?t2 1) ?t3) $?)
        (refuse-time (teacher ?teacher) (time $?r-t))
        (test (not (or (member$ ?t1 $?r-t) (member$ ?t2 $?r-t) (member$ ?t3 $?r-t))))
        (classroom (ID ?classroom) (type ?type))
        (not (lesson (teacher ?teacher) (time $? ?t1|?t2|?t3 $?)))
        (not (lesson (class ?class) (time $? ?t1|?t2|?t3 $?)))
        (not (lesson (room $? ?classroom $?) (time $? ?t1 $?)))
        (not (lesson (room $? ?classroom $?) (time $? ?t2 $?)))
        (not (lesson (room $? ?classroom $?) (time $? ?t3 $?)))
        =>
        (retract ?p ?f1)
        (assert (phase select-lesson))
        ;; Check if it's in favorite time for bonus points
        (if (and (favorite-time (teacher ?teacher) (time $?fav))
                (or (member$ ?t1 $?fav) (member$ ?t2 $?fav) (member$ ?t3 $?fav)))
            then
            (modify ?f3 (weight (+ ?weight 1)))
            (printout t "Scheduled lesson " ?select " in time slots " ?t1 " " ?t2 " " ?t3 " which includes favorite time for teacher " ?teacher crlf)
            else
            (printout t "Scheduled lesson " ?select " in time slots " ?t1 " " ?t2 " " ?t3 " for teacher " ?teacher crlf)
        )
        (modify ?f2 (state 1) (time ?t1 ?t2 ?t3) (room ?classroom ?classroom ?classroom)))

;; Handle case where a lesson can't be scheduled
(defrule cannot-schedule
        ?p <- (phase try-regular)
        ?f1 <- (select ?select)
        ?f2 <- (lesson (ID ?select) (state 0))
        (declare (salience -100))
        =>
        (retract ?p ?f1)
        (assert (phase select-lesson))
        (printout t "COULD NOT SCHEDULE LESSON " ?select crlf))

;; Check if all lessons are scheduled and save results
(defrule check-done
        ?p <- (phase select-lesson)
        (not (lesson (state 0)))
        =>
        (retract ?p)
        (assert (phase save-results))
        (printout t "All lessons have been processed" crlf))

;; Save the results to result.txt
(defrule save-results
        ?p <- (phase save-results)
        =>
        (retract ?p)
        (save-facts "result.txt" local lesson)
        (printout t "Results saved to result.txt" crlf)
        (printout t "Scheduling complete! Run scoring.txt to evaluate the solution." crlf))
